---
# Copyright (c) 2016 Intel Corporation
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#      http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

  - name: Create a local certificates directory if it does not exist
    become: no
    connection: local
    file: path=certificates/ciao state=directory

  - name: Create Scheduler key and CA certificate
    become: no
    connection: local
    command: >
      {{ gopath }}/bin/ciao-cert -anchor -role scheduler
      -email={{ ciao_admin_email }} -organization="{{ ciao_cert_organization }}"
      -ip={{ ciao_controller_ip }} -host={{ ciao_controller_fqdn }} -verify
    args:
      chdir: certificates/ciao
      creates: CAcert-{{ ciao_controller_fqdn }}.pem

  - name: Clean dual_agent_keys if there are no dual_nodes
    set_fact:
      dual_agent_keys: [ ]
    when: not dual_nodes

  - name: Create agent keys
    become: no
    connection: local
    command: >
      {{ gopath }}/bin/ciao-cert -role {{ item.role }} --anchor-cert
      cert-Scheduler-{{ ciao_controller_fqdn }}.pem -email={{ ciao_admin_email }}
      --organization="{{ ciao_cert_organization }}" -host=localhost -verify
    args:
      chdir: certificates/ciao
      creates: "{{ item.creates }}"
    with_items: "{{ agent_keys + dual_agent_keys }}"

  - name: Copy certificates
    copy: src=certificates/{{ item }} dest=/etc/pki/{{ item }}
    with_items:
      - ciao/CAcert-{{ ciao_controller_fqdn }}.pem
      - ciao/cert-Controller-localhost.pem
      - ciao/cert-Scheduler-{{ ciao_controller_fqdn }}.pem
      - keystone/keystone_cert.pem
      - keystone/keystone_key.pem

  - name: Install certificate (ClearLinux)
    copy: src=certificates/keystone/keystone_cert.pem dest=/etc/ssl/certs
    when: ansible_os_family == "Clear linux software for intel architecture"

  - block:
      - name: Install certificate (Ubuntu)
        copy:
          src: certificates/keystone/keystone_cert.pem
          dest: /usr/local/share/ca-certificates/keystone_cert.crt

      - name: Update CA certificates (Ubuntu)
        command: update-ca-certificates
        args:
          creates: /etc/ssl/certs/keystone_cert.pem
    when: ansible_os_family == "Debian"

  - block:
      - name: Install certificate (Fedora)
        copy:
          src: certificates/keystone/keystone_cert.pem
          dest: /etc/pki/ca-trust/source/anchors/keystone_cert.pem

      - name: Update CA trust (Fedora)
        command: update-ca-trust
        args:
          creates: /etc/pki/tls/certs/keystone_cert.pem
    when: ansible_os_family == "RedHat"
